<?php
namespace Xin\Thrift\OrderService\Order;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Cart {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'userId',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'shopId',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'orderId',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    5 => array(
      'var' => 'goodsId',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    6 => array(
      'var' => 'unitFee',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'num',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'isDeleted',
      'isRequired' => false,
      'type' => TType::BYTE,
      ),
    );

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $shopId = null;
  /**
   * @var int
   */
  public $orderId = null;
  /**
   * @var int
   */
  public $goodsId = null;
  /**
   * @var int
   */
  public $unitFee = null;
  /**
   * @var int
   */
  public $num = null;
  /**
   * @var int
   */
  public $isDeleted = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['shopId'])) {
        $this->shopId = $vals['shopId'];
      }
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['goodsId'])) {
        $this->goodsId = $vals['goodsId'];
      }
      if (isset($vals['unitFee'])) {
        $this->unitFee = $vals['unitFee'];
      }
      if (isset($vals['num'])) {
        $this->num = $vals['num'];
      }
      if (isset($vals['isDeleted'])) {
        $this->isDeleted = $vals['isDeleted'];
      }
    }
  }

  public function getName() {
    return 'Cart';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->shopId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goodsId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->unitFee);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->isDeleted);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Cart');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 1);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 2);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shopId !== null) {
      $xfer += $output->writeFieldBegin('shopId', TType::I64, 3);
      $xfer += $output->writeI64($this->shopId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::I64, 4);
      $xfer += $output->writeI64($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goodsId !== null) {
      $xfer += $output->writeFieldBegin('goodsId', TType::I64, 5);
      $xfer += $output->writeI64($this->goodsId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unitFee !== null) {
      $xfer += $output->writeFieldBegin('unitFee', TType::I32, 6);
      $xfer += $output->writeI32($this->unitFee);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num !== null) {
      $xfer += $output->writeFieldBegin('num', TType::I32, 7);
      $xfer += $output->writeI32($this->num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isDeleted !== null) {
      $xfer += $output->writeFieldBegin('isDeleted', TType::BYTE, 8);
      $xfer += $output->writeByte($this->isDeleted);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

