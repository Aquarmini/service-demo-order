// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package service

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Code
//  - Message
type ThriftException struct {
  Code int32 `thrift:"code,1" db:"code" json:"code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewThriftException() *ThriftException {
  return &ThriftException{}
}


func (p *ThriftException) GetCode() int32 {
  return p.Code
}

func (p *ThriftException) GetMessage() string {
  return p.Message
}
func (p *ThriftException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *ThriftException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *ThriftException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ThriftException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ThriftException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *ThriftException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftException(%+v)", *p)
}

func (p *ThriftException) Error() string {
  return p.String()
}

type Order interface {
  Version(ctx context.Context) (r string, err error)
  // Parameters:
  //  - UserId
  //  - GoodsId
  AddGoodsToCart(ctx context.Context, userId int64, goodsId int64) (r bool, err error)
  // Parameters:
  //  - UserId
  //  - GoodsId
  //  - ID
  DelGoodsFromCart(ctx context.Context, userId int64, goodsId int64, id int64) (r bool, err error)
}

type OrderClient struct {
  c thrift.TClient
}

// Deprecated: Use NewOrder instead
func NewOrderClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *OrderClient {
  return &OrderClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewOrder instead
func NewOrderClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *OrderClient {
  return &OrderClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewOrderClient(c thrift.TClient) *OrderClient {
  return &OrderClient{
    c: c,
  }
}

func (p *OrderClient) Version(ctx context.Context) (r string, err error) {
  var _args0 OrderVersionArgs
  var _result1 OrderVersionResult
  if err = p.c.Call(ctx, "version", &_args0, &_result1); err != nil {
    return
  }
  switch {
  case _result1.Ex!= nil:
    return r, _result1.Ex
  }

  return _result1.GetSuccess(), nil
}

// Parameters:
//  - UserId
//  - GoodsId
func (p *OrderClient) AddGoodsToCart(ctx context.Context, userId int64, goodsId int64) (r bool, err error) {
  var _args2 OrderAddGoodsToCartArgs
  _args2.UserId = userId
  _args2.GoodsId = goodsId
  var _result3 OrderAddGoodsToCartResult
  if err = p.c.Call(ctx, "addGoodsToCart", &_args2, &_result3); err != nil {
    return
  }
  switch {
  case _result3.Ex!= nil:
    return r, _result3.Ex
  }

  return _result3.GetSuccess(), nil
}

// Parameters:
//  - UserId
//  - GoodsId
//  - ID
func (p *OrderClient) DelGoodsFromCart(ctx context.Context, userId int64, goodsId int64, id int64) (r bool, err error) {
  var _args4 OrderDelGoodsFromCartArgs
  _args4.UserId = userId
  _args4.GoodsId = goodsId
  _args4.ID = id
  var _result5 OrderDelGoodsFromCartResult
  if err = p.c.Call(ctx, "delGoodsFromCart", &_args4, &_result5); err != nil {
    return
  }
  switch {
  case _result5.Ex!= nil:
    return r, _result5.Ex
  }

  return _result5.GetSuccess(), nil
}

type OrderProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Order
}

func (p *OrderProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *OrderProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *OrderProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewOrderProcessor(handler Order) *OrderProcessor {

  self6 := &OrderProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self6.processorMap["version"] = &orderProcessorVersion{handler:handler}
  self6.processorMap["addGoodsToCart"] = &orderProcessorAddGoodsToCart{handler:handler}
  self6.processorMap["delGoodsFromCart"] = &orderProcessorDelGoodsFromCart{handler:handler}
return self6
}

func (p *OrderProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x7.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x7

}

type orderProcessorVersion struct {
  handler Order
}

func (p *orderProcessorVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OrderVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("version", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OrderVersionResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.Version(ctx); err2 != nil {
  switch v := err2.(type) {
    case *ThriftException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing version: " + err2.Error())
    oprot.WriteMessageBegin("version", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("version", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type orderProcessorAddGoodsToCart struct {
  handler Order
}

func (p *orderProcessorAddGoodsToCart) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OrderAddGoodsToCartArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addGoodsToCart", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OrderAddGoodsToCartResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.AddGoodsToCart(ctx, args.UserId, args.GoodsId); err2 != nil {
  switch v := err2.(type) {
    case *ThriftException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addGoodsToCart: " + err2.Error())
    oprot.WriteMessageBegin("addGoodsToCart", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("addGoodsToCart", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type orderProcessorDelGoodsFromCart struct {
  handler Order
}

func (p *orderProcessorDelGoodsFromCart) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OrderDelGoodsFromCartArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("delGoodsFromCart", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OrderDelGoodsFromCartResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DelGoodsFromCart(ctx, args.UserId, args.GoodsId, args.ID); err2 != nil {
  switch v := err2.(type) {
    case *ThriftException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delGoodsFromCart: " + err2.Error())
    oprot.WriteMessageBegin("delGoodsFromCart", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("delGoodsFromCart", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type OrderVersionArgs struct {
}

func NewOrderVersionArgs() *OrderVersionArgs {
  return &OrderVersionArgs{}
}

func (p *OrderVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OrderVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("version_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OrderVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OrderVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type OrderVersionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *ThriftException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewOrderVersionResult() *OrderVersionResult {
  return &OrderVersionResult{}
}

var OrderVersionResult_Success_DEFAULT string
func (p *OrderVersionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return OrderVersionResult_Success_DEFAULT
  }
return *p.Success
}
var OrderVersionResult_Ex_DEFAULT *ThriftException
func (p *OrderVersionResult) GetEx() *ThriftException {
  if !p.IsSetEx() {
    return OrderVersionResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *OrderVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OrderVersionResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *OrderVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OrderVersionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *OrderVersionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ThriftException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *OrderVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("version_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OrderVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OrderVersionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *OrderVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OrderVersionResult(%+v)", *p)
}

// Attributes:
//  - UserId
//  - GoodsId
type OrderAddGoodsToCartArgs struct {
  UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
  GoodsId int64 `thrift:"goodsId,2" db:"goodsId" json:"goodsId"`
}

func NewOrderAddGoodsToCartArgs() *OrderAddGoodsToCartArgs {
  return &OrderAddGoodsToCartArgs{}
}


func (p *OrderAddGoodsToCartArgs) GetUserId() int64 {
  return p.UserId
}

func (p *OrderAddGoodsToCartArgs) GetGoodsId() int64 {
  return p.GoodsId
}
func (p *OrderAddGoodsToCartArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OrderAddGoodsToCartArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *OrderAddGoodsToCartArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GoodsId = v
}
  return nil
}

func (p *OrderAddGoodsToCartArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addGoodsToCart_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OrderAddGoodsToCartArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *OrderAddGoodsToCartArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("goodsId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:goodsId: ", p), err) }
  if err := oprot.WriteI64(int64(p.GoodsId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.goodsId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:goodsId: ", p), err) }
  return err
}

func (p *OrderAddGoodsToCartArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OrderAddGoodsToCartArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type OrderAddGoodsToCartResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *ThriftException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewOrderAddGoodsToCartResult() *OrderAddGoodsToCartResult {
  return &OrderAddGoodsToCartResult{}
}

var OrderAddGoodsToCartResult_Success_DEFAULT bool
func (p *OrderAddGoodsToCartResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return OrderAddGoodsToCartResult_Success_DEFAULT
  }
return *p.Success
}
var OrderAddGoodsToCartResult_Ex_DEFAULT *ThriftException
func (p *OrderAddGoodsToCartResult) GetEx() *ThriftException {
  if !p.IsSetEx() {
    return OrderAddGoodsToCartResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *OrderAddGoodsToCartResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OrderAddGoodsToCartResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *OrderAddGoodsToCartResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OrderAddGoodsToCartResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *OrderAddGoodsToCartResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ThriftException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *OrderAddGoodsToCartResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addGoodsToCart_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OrderAddGoodsToCartResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OrderAddGoodsToCartResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *OrderAddGoodsToCartResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OrderAddGoodsToCartResult(%+v)", *p)
}

// Attributes:
//  - UserId
//  - GoodsId
//  - ID
type OrderDelGoodsFromCartArgs struct {
  UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
  GoodsId int64 `thrift:"goodsId,2" db:"goodsId" json:"goodsId"`
  ID int64 `thrift:"id,3" db:"id" json:"id"`
}

func NewOrderDelGoodsFromCartArgs() *OrderDelGoodsFromCartArgs {
  return &OrderDelGoodsFromCartArgs{}
}


func (p *OrderDelGoodsFromCartArgs) GetUserId() int64 {
  return p.UserId
}

func (p *OrderDelGoodsFromCartArgs) GetGoodsId() int64 {
  return p.GoodsId
}

func (p *OrderDelGoodsFromCartArgs) GetID() int64 {
  return p.ID
}
func (p *OrderDelGoodsFromCartArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OrderDelGoodsFromCartArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *OrderDelGoodsFromCartArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GoodsId = v
}
  return nil
}

func (p *OrderDelGoodsFromCartArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *OrderDelGoodsFromCartArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delGoodsFromCart_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OrderDelGoodsFromCartArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *OrderDelGoodsFromCartArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("goodsId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:goodsId: ", p), err) }
  if err := oprot.WriteI64(int64(p.GoodsId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.goodsId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:goodsId: ", p), err) }
  return err
}

func (p *OrderDelGoodsFromCartArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:id: ", p), err) }
  return err
}

func (p *OrderDelGoodsFromCartArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OrderDelGoodsFromCartArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type OrderDelGoodsFromCartResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *ThriftException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewOrderDelGoodsFromCartResult() *OrderDelGoodsFromCartResult {
  return &OrderDelGoodsFromCartResult{}
}

var OrderDelGoodsFromCartResult_Success_DEFAULT bool
func (p *OrderDelGoodsFromCartResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return OrderDelGoodsFromCartResult_Success_DEFAULT
  }
return *p.Success
}
var OrderDelGoodsFromCartResult_Ex_DEFAULT *ThriftException
func (p *OrderDelGoodsFromCartResult) GetEx() *ThriftException {
  if !p.IsSetEx() {
    return OrderDelGoodsFromCartResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *OrderDelGoodsFromCartResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OrderDelGoodsFromCartResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *OrderDelGoodsFromCartResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OrderDelGoodsFromCartResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *OrderDelGoodsFromCartResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &ThriftException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *OrderDelGoodsFromCartResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delGoodsFromCart_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OrderDelGoodsFromCartResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OrderDelGoodsFromCartResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *OrderDelGoodsFromCartResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OrderDelGoodsFromCartResult(%+v)", *p)
}


